<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestión de Transporte - Sistema Completo</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }

        .header h1 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 10px;
        }

        .user-info {
            text-align: center;
            color: #666;
            margin-bottom: 15px;
        }

        .nav-tabs {
            display: flex;
            gap: 10px;
            justify-content: center;
            flex-wrap: wrap;
            margin-top: 20px;
        }

        .tab-btn {
            background: linear-gradient(45deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 25px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            font-size: 14px;
        }

        .tab-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(79, 172, 254, 0.3);
        }

        .tab-btn.active {
            background: linear-gradient(45deg, #667eea 0%, #764ba2 100%);
        }

        .content-section {
            display: none;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 20px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }

        .content-section.active {
            display: block;
        }

        .card {
            background: white;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .form-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin-bottom: 15px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-group label {
            margin-bottom: 5px;
            font-weight: 600;
            color: #2c3e50;
        }

        .form-group input, .form-group select, .form-group textarea {
            padding: 12px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s;
        }

        .form-group input:focus, .form-group select:focus, .form-group textarea:focus {
            outline: none;
            border-color: #4facfe;
        }

        .btn {
            background: linear-gradient(45deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            font-size: 14px;
            transition: all 0.3s ease;
            margin: 5px;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(79, 172, 254, 0.3);
        }

        .btn-danger {
            background: linear-gradient(45deg, #e74c3c 0%, #c0392b 100%);
        }

        .btn-success {
            background: linear-gradient(45deg, #27ae60 0%, #2ecc71 100%);
        }

        .btn-warning {
            background: linear-gradient(45deg, #f39c12 0%, #e67e22 100%);
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        .data-table th, .data-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .data-table th {
            background: #f8f9fa;
            font-weight: 600;
            color: #2c3e50;
        }

        .data-table tr:hover {
            background: #f8f9fa;
        }

        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            z-index: 10000;
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.3s ease;
        }

        .toast.success { background: #27ae60; }
        .toast.error { background: #e74c3c; }
        .toast.warning { background: #f39c12; }
        .toast.info { background: #3498db; }

        .toast.show {
            opacity: 1;
            transform: translateX(0);
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
        }

        .modal-content {
            background: white;
            margin: 5% auto;
            padding: 20px;
            border-radius: 10px;
            width: 90%;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover {
            color: #000;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            border-left: 4px solid #4facfe;
        }

        .stat-number {
            font-size: 2em;
            font-weight: bold;
            color: #2c3e50;
        }

        .stat-label {
            color: #666;
            margin-top: 5px;
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .nav-tabs {
                flex-direction: column;
            }
            
            .modal-content {
                width: 95%;
                margin: 10% auto;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🚚 Sistema de Gestión de Tran</h1>
            <div class="user-info" id="userInfo">
                <!-- Se llena dinámicamente -->
            </div>
            
            <div class="nav-tabs">
                <button class="tab-btn active" onclick="showSection('dashboard')">📊 Dashboard</button>
                <button class="tab-btn" onclick="showSection('vehicles')">🚚 Vehículos</button>
                <button class="tab-btn" onclick="showSection('drivers')">👥 Conductores</button>
                <button class="tab-btn" onclick="showSection('documents')">📄 Documentos</button>
                <button class="tab-btn" onclick="showSection('expenses')">💰 Gastos</button>
                <button class="tab-btn" onclick="showSection('reports')">📊 Reportes</button>
                <button class="tab-btn" onclick="logout()">🚪 Salir</button>
            </div>
        </div>

        <!-- Dashboard -->
        <section id="dashboard" class="content-section active">
            <h2>📊 Dashboard</h2>
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number" id="totalVehicles">0</div>
                    <div class="stat-label">Vehículos</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="totalDrivers">0</div>
                    <div class="stat-label">Conductores</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="totalExpenses">$0</div>
                    <div class="stat-label">Gastos del Mes</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="totalDocuments">0</div>
                    <div class="stat-label">Documentos</div>
                </div>
            </div>
            
            <div class="card">
                <h3>📋 Resumen Rápido</h3>
                <div id="quickSummary">
                    <!-- Se llena dinámicamente -->
                </div>
            </div>
        </section>

        <!-- Vehículos -->
        <section id="vehicles" class="content-section">
            <h2>🚚 Gestión de Vehículos</h2>
            
            <div class="card">
                <h3 id="vehicleFormTitle">Registrar Nuevo Vehículo</h3>
                <form id="vehicleForm">
                    <div class="form-row">
                        <div class="form-group">
                            <label>Placa *</label>
                            <input type="text" name="plate" required placeholder="ABC123" style="text-transform: uppercase;">
                        </div>
                        <div class="form-group">
                            <label>Marca *</label>
                            <input type="text" name="brand" required placeholder="Toyota, Chevrolet, etc.">
                        </div>
                        <div class="form-group">
                            <label>Modelo *</label>
                            <input type="text" name="model" required placeholder="Corolla, Aveo, etc.">
                        </div>
                        <div class="form-group">
                            <label>Año *</label>
                            <input type="number" name="year" required min="1990" max="2030">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>Conductor Asignado</label>
                            <select name="driverId" id="vehicleDriverSelect">
                                <option value="">Sin asignar</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Estado</label>
                            <select name="isActive">
                                <option value="true">Activo</option>
                                <option value="false">Inactivo</option>
                            </select>
                        </div>
                    </div>
                    <button type="submit" class="btn">💾 Guardar Vehículo</button>
                    <button type="button" class="btn btn-warning" onclick="cancelVehicleEdit()">❌ Cancelar</button>
                </form>
            </div>

            <div class="card">
                <h3>📋 Listado de Vehículos</h3>
                <div id="vehiclesList">
                    <!-- Se llena dinámicamente -->
                </div>
            </div>
        </section>

        <!-- Conductores -->
        <section id="drivers" class="content-section">
            <h2>👥 Gestión de Conductores</h2>
            
            <div class="card">
                <h3 id="driverFormTitle">Registrar Nuevo Conductor</h3>
                <form id="driverForm">
                    <div class="form-row">
                        <div class="form-group">
                            <label>Nombre Completo *</label>
                            <input type="text" name="name" required placeholder="Nombre completo">
                        </div>
                        <div class="form-group">
                            <label>Cédula *</label>
                            <input type="text" name="idNumber" required placeholder="Número de cédula">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>Licencia de Conducir *</label>
                            <input type="text" name="licenseNumber" required placeholder="Número de licencia">
                        </div>
                        <div class="form-group">
                            <label>Categoría de Licencia</label>
                            <select name="licenseCategory">
                                <option value="C1">C1 - Camiones de carga</option>
                                <option value="C2">C2 - Vehículos articulados</option>
                                <option value="B1">B1 - Automóviles, campeonetas</option>
                                <option value="B2">B2 - Camiones hasta 7.5 ton</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>Fecha Vencimiento Licencia *</label>
                            <input type="date" name="licenseExpiry" required>
                        </div>
                        <div class="form-group">
                            <label>Teléfono</label>
                            <input type="tel" name="phone" placeholder="Número de teléfono">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>Email</label>
                            <input type="email" name="email" placeholder="correo@ejemplo.com">
                        </div>
                        <div class="form-group">
                            <label>Vehículo Asignado</label>
                            <select name="vehicleId" id="driverVehicleSelect">
                                <option value="">Sin asignar</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>Usuario para Sistema *</label>
                            <input type="text" name="username" required placeholder="Usuario para login">
                        </div>
                        <div class="form-group">
                            <label>Contraseña *</label>
                            <input type="password" name="password" required placeholder="Contraseña">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>Dirección</label>
                            <textarea name="address" rows="3" placeholder="Dirección completa"></textarea>
                        </div>
                        <div class="form-group">
                            <label>Estado</label>
                            <select name="isActive">
                                <option value="true">Activo</option>
                                <option value="false">Inactivo</option>
                            </select>
                        </div>
                    </div>
                    <button type="submit" class="btn">💾 Guardar Conductor</button>
                    <button type="button" class="btn btn-warning" onclick="cancelDriverEdit()">❌ Cancelar</button>
                </form>
            </div>

            <div class="card">
                <h3>📋 Listado de Conductores</h3>
                <div id="driversList">
                    <!-- Se llena dinámicamente -->
                </div>
            </div>
        </section>

        <!-- Documentos -->
        <section id="documents" class="content-section">
            <h2>📄 Gestión de Documentos</h2>
            <div class="card">
                <h3>🚚 Seleccionar Vehículo</h3>
                <select id="documentVehicleSelect" onchange="loadDocuments()">
                    <option value="">Seleccionar vehículo...</option>
                </select>
            </div>
            
            <div id="documentsContainer">
                <!-- Se llena dinámicamente -->
            </div>
        </section>

        <!-- Gastos -->
        <section id="expenses" class="content-section">
            <h2>💰 Gestión de Gastos</h2>
            
            <div class="card">
                <h3>Registrar Nuevo Gasto</h3>
                <form id="expenseForm">
                    <div class="form-row">
                        <div class="form-group">
                            <label>Conductor *</label>
                            <select name="driverId" required id="expenseDriverSelect">
                                <option value="">Seleccionar conductor...</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Vehículo *</label>
                            <select name="vehicleId" required id="expenseVehicleSelect">
                                <option value="">Seleccionar vehículo...</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>Tipo de Gasto *</label>
                            <select name="type" required>
                                <option value="combustible">Combustible</option>
                                <option value="mantenimiento">Mantenimiento</option>
                                <option value="repuestos">Repuestos</option>
                                <option value="multas">Multas</option>
                                <option value="peajes">Peajes</option>
                                <option value="otros">Otros</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Monto *</label>
                            <input type="number" name="amount" required min="0" step="0.01" placeholder="0.00">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>Fecha *</label>
                            <input type="date" name="date" required>
                        </div>
                        <div class="form-group">
                            <label>Descripción</label>
                            <input type="text" name="description" placeholder="Descripción del gasto">
                        </div>
                    </div>
                    <button type="submit" class="btn">💾 Guardar Gasto</button>
                </form>
            </div>

            <div class="card">
                <h3>📋 Listado de Gastos</h3>
                <div id="expensesList">
                    <!-- Se llena dinámicamente -->
                </div>
            </div>
        </section>

        <!-- Reportes -->
        <section id="reports" class="content-section">
            <h2>📊 Reportes</h2>
            <div class="card">
                <h3>📈 Resumen Ejecutivo</h3>
                <div id="reportsContainer">
                    <!-- Se llena dinámicamente -->
                </div>
            </div>
        </section>
    </div>

    <!-- Modal -->
    <div id="modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <div id="modalContent">
                <!-- Se llena dinámicamente -->
            </div>
        </div>
    </div>

    <script>
        // Variables globales
        let vehicles = JSON.parse(localStorage.getItem('vehicles')) || [];
        let drivers = JSON.parse(localStorage.getItem('drivers')) || [];
        let expenses = JSON.parse(localStorage.getItem('expenses')) || [];
        let documents = JSON.parse(localStorage.getItem('vehicleDocuments')) || [];
        let users = JSON.parse(localStorage.getItem('systemUsers')) || getDefaultUsers();
        let currentUser = JSON.parse(sessionStorage.getItem('userSession'));
        let editingVehicle = null;
        let editingDriver = null;

        // Usuarios por defecto
        function getDefaultUsers() {
            return {
                admin: {
                    password: 'admin123',
                    type: 'admin',
                    name: 'Administrador',
                    id: 'admin'
                }
            };
        }

        // Inicialización
        document.addEventListener('DOMContentLoaded', function() {
            if (!currentUser) {
                window.location.href = 'login.html';
                return;
            }

            // Configurar monitor de cambios en el container de vehículos
            const vehicleContainer = document.getElementById('vehiclesList');
            if (vehicleContainer) {
                console.log('🔍 [INIT] Configurando monitor de cambios en vehiclesList...');
                
                // Observer para detectar cambios en el contenido
                const observer = new MutationObserver((mutations) => {
                    mutations.forEach((mutation) => {
                        if (mutation.type === 'childList') {
                            console.log('🔄 [MONITOR] vehiclesList content changed:', vehicleContainer.innerHTML.substring(0, 100) + '...');
                        }
                    });
                });
                
                observer.observe(vehicleContainer, {
                    childList: true,
                    subtree: true,
                    characterData: true
                });
            }

            updateUserInfo();
            loadDashboardData();
            loadVehicles();
            loadDrivers();
            loadExpenses();
            setupEventListeners();
            updateSelects();
        });

        function updateUserInfo() {
            const userInfo = document.getElementById('userInfo');
            userInfo.innerHTML = `
                <span>👤 ${currentUser.name} (${currentUser.type === 'admin' ? 'Administrador' : 'Conductor'})</span>
            `;
        }

        function setupEventListeners() {
            // Formulario de vehículos
            document.getElementById('vehicleForm').addEventListener('submit', function(e) {
                e.preventDefault();
                saveVehicle();
            });

            // Formulario de conductores
            document.getElementById('driverForm').addEventListener('submit', function(e) {
                e.preventDefault();
                saveDriver();
            });

            // Formulario de gastos
            document.getElementById('expenseForm').addEventListener('submit', function(e) {
                e.preventDefault();
                saveExpense();
            });

            // Establecer fecha actual por defecto
            const today = new Date().toISOString().split('T')[0];
            document.querySelector('input[name="date"]').value = today;
        }

        // Navegación
        function showSection(sectionName) {
            // Ocultar todas las secciones
            document.querySelectorAll('.content-section').forEach(section => {
                section.classList.remove('active');
            });
            
            // Remover clase activa de todos los botones
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Mostrar sección seleccionada
            document.getElementById(sectionName).classList.add('active');
            
            // Activar botón correspondiente
            event.target.classList.add('active');

            // Cargar datos específicos
            if (sectionName === 'dashboard') {
                loadDashboardData();
            } else if (sectionName === 'documents') {
                updateDocumentVehicleSelect();
            } else if (sectionName === 'reports') {
                loadReports();
            }
        }

        // Gestión de Vehículos
        function saveVehicle() {
            try {
                const form = document.getElementById('vehicleForm');
                const formData = new FormData(form);
                
                const vehicleData = {
                    id: editingVehicle ? editingVehicle.id : Date.now(),
                    plate: formData.get('plate').toUpperCase().trim(),
                    brand: formData.get('brand').trim(),
                    model: formData.get('model').trim(),
                    year: parseInt(formData.get('year')),
                    driverId: formData.get('driverId') ? parseInt(formData.get('driverId')) : null,
                    isActive: formData.get('isActive') === 'true',
                    createdAt: editingVehicle ? editingVehicle.createdAt : new Date().toISOString(),
                    updatedAt: new Date().toISOString()
                };

                console.log('Guardando vehículo:', vehicleData);

                // Validaciones
                if (!vehicleData.plate || !vehicleData.brand || !vehicleData.model || !vehicleData.year) {
                    showToast('Todos los campos marcados con * son obligatorios', 'error');
                    return;
                }

                // Verificar placa única
                const existingVehicle = vehicles.find(v => v.plate === vehicleData.plate && v.id !== vehicleData.id);
                if (existingVehicle) {
                    showToast('Ya existe un vehículo con esa placa', 'error');
                    return;
                }

                if (editingVehicle) {
                    // Actualizar
                    const index = vehicles.findIndex(v => v.id === editingVehicle.id);
                    if (index !== -1) {
                        vehicles[index] = vehicleData;
                        showToast('Vehículo actualizado exitosamente', 'success');
                    }
                } else {
                    // Crear nuevo
                    vehicles.push(vehicleData);
                    showToast('Vehículo registrado exitosamente', 'success');
                }

                // Actualizar conductor asignado
                if (vehicleData.driverId) {
                    const driverIndex = drivers.findIndex(d => d.id == vehicleData.driverId);
                    if (driverIndex !== -1) {
                        drivers[driverIndex].vehicleId = vehicleData.id;
                        localStorage.setItem('drivers', JSON.stringify(drivers));
                    }
                }

                // Guardar en localStorage
                localStorage.setItem('vehicles', JSON.stringify(vehicles));
                console.log('Vehículos guardados:', vehicles);
                
                // Recargar vista y resetear formulario
                loadVehicles();
                updateSelects();
                resetVehicleForm();
                
            } catch (error) {
                console.error('Error al guardar vehículo:', error);
                showToast('Error al guardar vehículo: ' + error.message, 'error');
            }
        }

        function loadVehicles() {
            try {
                console.log('🚚 [loadVehicles] Iniciando carga de vehículos desde localStorage...');
                
                // Recargar datos desde localStorage
                vehicles = JSON.parse(localStorage.getItem('vehicles')) || [];
                console.log('🚚 [loadVehicles] Vehículos cargados desde localStorage:', vehicles.length, 'vehículos');
                console.log('🚚 [loadVehicles] Datos completos:', vehicles);
                
                const container = document.getElementById('vehiclesList');
                console.log('🚚 [loadVehicles] Container encontrado:', !!container);
                
                if (!container) {
                    console.error('❌ [loadVehicles] Container vehiclesList no encontrado');
                    return;
                }
                
                if (vehicles.length === 0) {
                    console.log('📭 [loadVehicles] No hay vehículos para mostrar');
                    container.innerHTML = '<p>No hay vehículos registrados</p>';
                    return;
                }
                
                console.log('🔧 [loadVehicles] Generando HTML para', vehicles.length, 'vehículos...');

                let html = '<table class="data-table"><thead><tr><th>Placa</th><th>Marca</th><th>Modelo</th><th>Año</th><th>Conductor</th><th>Estado</th><th>Acciones</th></tr></thead><tbody>';
                
                vehicles.forEach(vehicle => {
                    console.log('Procesando vehículo:', vehicle);
                    const driver = drivers.find(d => d.id == vehicle.driverId);
                    html += `
                        <tr>
                            <td>${vehicle.plate || 'N/A'}</td>
                            <td>${vehicle.brand || 'N/A'}</td>
                            <td>${vehicle.model || 'N/A'}</td>
                            <td>${vehicle.year || 'N/A'}</td>
                            <td>${driver ? driver.name : 'Sin asignar'}</td>
                            <td>${vehicle.isActive ? '✅ Activo' : '❌ Inactivo'}</td>
                            <td>
                                <button class="btn btn-warning" onclick="editVehicle(${vehicle.id})">✏️ Editar</button>
                                <button class="btn btn-danger" onclick="deleteVehicle(${vehicle.id})">🗑️ Eliminar</button>
                            </td>
                        </tr>
                    `;
                });
                
                html += '</tbody></table>';
                console.log('🎯 [loadVehicles] Estableciendo HTML en container:', html.substring(0, 200) + '...');
                container.innerHTML = html;
                console.log('✅ [loadVehicles] Tabla de vehículos actualizada exitosamente');
                console.log('🔍 [loadVehicles] HTML final del container:', container.innerHTML.substring(0, 200) + '...');
                
            } catch (error) {
                console.error('Error al cargar vehículos:', error);
                const container = document.getElementById('vehiclesList');
                if (container) {
                    container.innerHTML = '<p>Error al cargar vehículos</p>';
                }
            }
        }

        function editVehicle(id) {
            editingVehicle = vehicles.find(v => v.id == id);
            const form = document.getElementById('vehicleForm');
            
            form.plate.value = editingVehicle.plate;
            form.brand.value = editingVehicle.brand;
            form.model.value = editingVehicle.model;
            form.year.value = editingVehicle.year;
            form.driverId.value = editingVehicle.driverId || '';
            form.isActive.value = editingVehicle.isActive;
            
            document.getElementById('vehicleFormTitle').textContent = 'Editar Vehículo';
        }

        function deleteVehicle(id) {
            if (!confirm('¿Está seguro de eliminar este vehículo?')) return;
            
            vehicles = vehicles.filter(v => v.id != id);
            localStorage.setItem('vehicles', JSON.stringify(vehicles));
            loadVehicles();
            showToast('Vehículo eliminado exitosamente', 'success');
        }

        function cancelVehicleEdit() {
            resetVehicleForm();
        }

        function resetVehicleForm() {
            document.getElementById('vehicleForm').reset();
            editingVehicle = null;
            document.getElementById('vehicleFormTitle').textContent = 'Registrar Nuevo Vehículo';
        }

        // Gestión de Conductores
        function saveDriver() {
            try {
                const form = document.getElementById('driverForm');
                const formData = new FormData(form);
                
                const driverData = {
                    id: editingDriver ? editingDriver.id : Date.now(),
                    name: formData.get('name').trim(),
                    idNumber: formData.get('idNumber').trim(),
                    licenseNumber: formData.get('licenseNumber').trim(),
                    licenseCategory: formData.get('licenseCategory'),
                    licenseExpiry: formData.get('licenseExpiry'),
                    phone: formData.get('phone') ? formData.get('phone').trim() : '',
                    email: formData.get('email') ? formData.get('email').trim() : '',
                    address: formData.get('address') ? formData.get('address').trim() : '',
                    vehicleId: formData.get('vehicleId') ? parseInt(formData.get('vehicleId')) : null,
                    isActive: formData.get('isActive') === 'true',
                    createdAt: editingDriver ? editingDriver.createdAt : new Date().toISOString(),
                    updatedAt: new Date().toISOString()
                };

                const username = formData.get('username').trim();
                const password = formData.get('password');

                console.log('Guardando conductor:', driverData);
                console.log('Usuario:', username, 'Password:', password);

                // Validaciones
                if (!driverData.name || !driverData.idNumber || !driverData.licenseNumber || !driverData.licenseExpiry || !username || !password) {
                    showToast('Todos los campos marcados con * son obligatorios', 'error');
                    return;
                }

                // Verificar cédula única
                const existingDriver = drivers.find(d => d.idNumber === driverData.idNumber && d.id !== driverData.id);
                if (existingDriver) {
                    showToast('Ya existe un conductor con esa cédula', 'error');
                    return;
                }

                // Verificar usuario único
                if (users[username] && (!editingDriver || editingDriver.username !== username)) {
                    showToast('El nombre de usuario ya existe', 'error');
                    return;
                }

                // Guardar el username en driverData
                driverData.username = username;

                if (editingDriver) {
                    // Actualizar
                    const index = drivers.findIndex(d => d.id === editingDriver.id);
                    if (index !== -1) {
                        drivers[index] = driverData;
                        
                        // Actualizar usuario
                        if (editingDriver.username && editingDriver.username !== username) {
                            delete users[editingDriver.username];
                        }
                        users[username] = {
                            password: password,
                            type: 'driver',
                            name: driverData.name,
                            id: username,
                            driverId: driverData.id
                        };
                        
                        showToast('Conductor actualizado exitosamente', 'success');
                    }
                } else {
                    // Crear nuevo
                    drivers.push(driverData);
                    
                    // Crear usuario
                    users[username] = {
                        password: password,
                        type: 'driver',
                        name: driverData.name,
                        id: username,
                        driverId: driverData.id
                    };
                    
                    showToast('Conductor registrado exitosamente', 'success');
                }

                // Actualizar vehículo asignado
                if (driverData.vehicleId) {
                    const vehicleIndex = vehicles.findIndex(v => v.id == driverData.vehicleId);
                    if (vehicleIndex !== -1) {
                        // Liberar vehículo anterior si existe
                        if (editingDriver && editingDriver.vehicleId && editingDriver.vehicleId !== driverData.vehicleId) {
                            const oldVehicleIndex = vehicles.findIndex(v => v.id == editingDriver.vehicleId);
                            if (oldVehicleIndex !== -1) {
                                vehicles[oldVehicleIndex].driverId = null;
                            }
                        }
                        
                        vehicles[vehicleIndex].driverId = driverData.id;
                        localStorage.setItem('vehicles', JSON.stringify(vehicles));
                    }
                }

                // Guardar datos
                localStorage.setItem('drivers', JSON.stringify(drivers));
                localStorage.setItem('systemUsers', JSON.stringify(users));
                
                console.log('Conductores guardados:', drivers);
                console.log('Usuarios guardados:', users);
                
                // Recargar vista y resetear formulario
                loadDrivers();
                updateSelects();
                resetDriverForm();
                
            } catch (error) {
                console.error('Error al guardar conductor:', error);
                showToast('Error al guardar conductor: ' + error.message, 'error');
            }
        }

        function loadDrivers() {
            const container = document.getElementById('driversList');
            
            if (drivers.length === 0) {
                container.innerHTML = '<p>No hay conductores registrados</p>';
                return;
            }

            let html = '<table class="data-table"><thead><tr><th>Nombre</th><th>Cédula</th><th>Licencia</th><th>Vencimiento</th><th>Vehículo</th><th>Usuario</th><th>Estado</th><th>Acciones</th></tr></thead><tbody>';
            
            drivers.forEach(driver => {
                const vehicle = vehicles.find(v => v.id == driver.vehicleId);
                const licenseStatus = new Date(driver.licenseExpiry) < new Date() ? '❌ Vencida' : '✅ Vigente';
                
                html += `
                    <tr>
                        <td>${driver.name}</td>
                        <td>${driver.idNumber}</td>
                        <td>${driver.licenseNumber} (${driver.licenseCategory})</td>
                        <td>${formatDate(driver.licenseExpiry)} ${licenseStatus}</td>
                        <td>${vehicle ? vehicle.plate : 'Sin asignar'}</td>
                        <td>${driver.username || 'N/A'}</td>
                        <td>${driver.isActive ? '✅ Activo' : '❌ Inactivo'}</td>
                        <td>
                            <button class="btn btn-warning" onclick="editDriver(${driver.id})">✏️ Editar</button>
                            <button class="btn btn-danger" onclick="deleteDriver(${driver.id})">🗑️ Eliminar</button>
                        </td>
                    </tr>
                `;
            });
            
            html += '</tbody></table>';
            container.innerHTML = html;
        }

        function editDriver(id) {
            editingDriver = drivers.find(d => d.id == id);
            const form = document.getElementById('driverForm');
            
            form.name.value = editingDriver.name;
            form.idNumber.value = editingDriver.idNumber;
            form.licenseNumber.value = editingDriver.licenseNumber;
            form.licenseCategory.value = editingDriver.licenseCategory;
            form.licenseExpiry.value = editingDriver.licenseExpiry;
            form.phone.value = editingDriver.phone || '';
            form.email.value = editingDriver.email || '';
            form.address.value = editingDriver.address || '';
            form.vehicleId.value = editingDriver.vehicleId || '';
            form.username.value = editingDriver.username || '';
            form.password.value = ''; // No mostrar contraseña actual
            form.isActive.value = editingDriver.isActive;
            
            document.getElementById('driverFormTitle').textContent = 'Editar Conductor';
        }

        function deleteDriver(id) {
            if (!confirm('¿Está seguro de eliminar este conductor? También se eliminará su usuario del sistema.')) return;
            
            const driver = drivers.find(d => d.id == id);
            if (driver && driver.username) {
                delete users[driver.username];
                localStorage.setItem('systemUsers', JSON.stringify(users));
            }
            
            drivers = drivers.filter(d => d.id != id);
            saveDrivers();
            loadDrivers();
            showToast('Conductor eliminado exitosamente', 'success');
        }

        function cancelDriverEdit() {
            resetDriverForm();
        }

        function resetDriverForm() {
            document.getElementById('driverForm').reset();
            editingDriver = null;
            document.getElementById('driverFormTitle').textContent = 'Registrar Nuevo Conductor';
        }


        // Gestión de Gastos
        function saveExpense() {
            try {
                const form = document.getElementById('expenseForm');
                const formData = new FormData(form);
                
                const expenseData = {
                    id: Date.now(),
                    driverId: parseInt(formData.get('driverId')),
                    vehicleId: parseInt(formData.get('vehicleId')),
                    type: formData.get('type'),
                    amount: parseFloat(formData.get('amount')),
                    date: formData.get('date'),
                    description: formData.get('description') ? formData.get('description').trim() : '',
                    createdAt: new Date().toISOString()
                };

                console.log('Guardando gasto:', expenseData);

                // Validaciones
                if (!expenseData.driverId || !expenseData.vehicleId || !expenseData.type || !expenseData.amount || !expenseData.date) {
                    showToast('Todos los campos marcados con * son obligatorios', 'error');
                    return;
                }

                if (expenseData.amount <= 0) {
                    showToast('El monto debe ser mayor a cero', 'error');
                    return;
                }

                expenses.push(expenseData);
                localStorage.setItem('expenses', JSON.stringify(expenses));
                
                console.log('Gastos guardados:', expenses);
                
                loadExpenses();
                loadDashboardData(); // Actualizar dashboard
                form.reset();
                
                // Establecer fecha actual por defecto
                const today = new Date().toISOString().split('T')[0];
                form.date.value = today;
                
                showToast('Gasto registrado exitosamente', 'success');
                
            } catch (error) {
                console.error('Error al guardar gasto:', error);
                showToast('Error al guardar gasto: ' + error.message, 'error');
            }
        }

        function loadExpenses() {
            const container = document.getElementById('expensesList');
            
            if (expenses.length === 0) {
                container.innerHTML = '<p>No hay gastos registrados</p>';
                return;
            }

            let html = '<table class="data-table"><thead><tr><th>Fecha</th><th>Conductor</th><th>Vehículo</th><th>Tipo</th><th>Monto</th><th>Descripción</th><th>Acciones</th></tr></thead><tbody>';
            
            expenses.sort((a, b) => new Date(b.date) - new Date(a.date)).forEach(expense => {
                const driver = drivers.find(d => d.id == expense.driverId);
                const vehicle = vehicles.find(v => v.id == expense.vehicleId);
                
                html += `
                    <tr>
                        <td>${formatDate(expense.date)}</td>
                        <td>${driver ? driver.name : 'N/A'}</td>
                        <td>${vehicle ? vehicle.plate : 'N/A'}</td>
                        <td>${expense.type}</td>
                        <td>$${expense.amount.toLocaleString()}</td>
                        <td>${expense.description || '-'}</td>
                        <td>
                            <button class="btn btn-danger" onclick="deleteExpense(${expense.id})">🗑️ Eliminar</button>
                        </td>
                    </tr>
                `;
            });
            
            html += '</tbody></table>';
            container.innerHTML = html;
        }

        function deleteExpense(id) {
            if (!confirm('¿Está seguro de eliminar este gasto?')) return;
            
            expenses = expenses.filter(e => e.id != id);
            localStorage.setItem('expenses', JSON.stringify(expenses));
            loadExpenses();
            showToast('Gasto eliminado exitosamente', 'success');
        }

        // Dashboard
        function loadDashboardData() {
            document.getElementById('totalVehicles').textContent = vehicles.length;
            document.getElementById('totalDrivers').textContent = drivers.length;
            
            const currentMonth = new Date().getMonth();
            const currentYear = new Date().getFullYear();
            const monthlyExpenses = expenses.filter(e => {
                const expenseDate = new Date(e.date);
                return expenseDate.getMonth() === currentMonth && expenseDate.getFullYear() === currentYear;
            }).reduce((total, e) => total + e.amount, 0);
            
            document.getElementById('totalExpenses').textContent = `$${monthlyExpenses.toLocaleString()}`;
            document.getElementById('totalDocuments').textContent = documents.length;

            // Resumen rápido
            const quickSummary = document.getElementById('quickSummary');
            const expiredLicenses = drivers.filter(d => new Date(d.licenseExpiry) < new Date()).length;
            const unassignedVehicles = vehicles.filter(v => !v.driverId).length;
            
            quickSummary.innerHTML = `
                <p>• Licencias vencidas: ${expiredLicenses}</p>
                <p>• Vehículos sin conductor: ${unassignedVehicles}</p>
                <p>• Gastos este mes: ${expenses.filter(e => {
                    const expenseDate = new Date(e.date);
                    return expenseDate.getMonth() === currentMonth && expenseDate.getFullYear() === currentYear;
                }).length}</p>
            `;
        }

        // Actualizar selects
        function updateSelects() {
            updateVehicleSelects();
            updateDriverSelects();
        }

        function updateVehicleSelects() {
            const selects = [
                document.getElementById('driverVehicleSelect'),
                document.getElementById('expenseVehicleSelect'),
                document.getElementById('documentVehicleSelect')
            ];

            selects.forEach(select => {
                if (select) {
                    const currentValue = select.value;
                    select.innerHTML = '<option value="">Seleccionar vehículo...</option>';
                    vehicles.forEach(vehicle => {
                        select.innerHTML += `<option value="${vehicle.id}">${vehicle.plate} - ${vehicle.brand} ${vehicle.model}</option>`;
                    });
                    select.value = currentValue;
                }
            });
        }

        function updateDriverSelects() {
            const selects = [
                document.getElementById('vehicleDriverSelect'),
                document.getElementById('expenseDriverSelect')
            ];

            selects.forEach(select => {
                if (select) {
                    const currentValue = select.value;
                    select.innerHTML = '<option value="">Seleccionar conductor...</option>';
                    drivers.forEach(driver => {
                        select.innerHTML += `<option value="${driver.id}">${driver.name}</option>`;
                    });
                    select.value = currentValue;
                }
            });
        }

        function updateDocumentVehicleSelect() {
            updateVehicleSelects();
        }

        // Documentos (básico)
        function loadDocuments() {
            const vehicleId = document.getElementById('documentVehicleSelect').value;
            const container = document.getElementById('documentsContainer');
            
            if (!vehicleId) {
                container.innerHTML = '';
                return;
            }

            const vehicle = vehicles.find(v => v.id == vehicleId);
            if (!vehicle) return;

            container.innerHTML = `
                <div class="card">
                    <h3>📄 Documentos de ${vehicle.plate}</h3>
                    <p>Funcionalidad de documentos disponible en el sistema MVC (main.html)</p>
                    <a href="main.html" class="btn">🔗 Ir al Sistema Completo</a>
                </div>
            `;
        }

        // Reportes (básico)
        function loadReports() {
            const container = document.getElementById('reportsContainer');
            const totalExpenses = expenses.reduce((total, e) => total + e.amount, 0);
            const expensesByType = {};
            
            expenses.forEach(expense => {
                expensesByType[expense.type] = (expensesByType[expense.type] || 0) + expense.amount;
            });

            let reportHtml = `
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-number">$${totalExpenses.toLocaleString()}</div>
                        <div class="stat-label">Total Gastos</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${expenses.length}</div>
                        <div class="stat-label">Número Gastos</div>
                    </div>
                </div>
                <h4>Gastos por Tipo:</h4>
                <ul>
            `;
            
            Object.entries(expensesByType).forEach(([type, amount]) => {
                reportHtml += `<li>${type}: $${amount.toLocaleString()}</li>`;
            });
            
            reportHtml += '</ul>';
            container.innerHTML = reportHtml;
        }

        // Utilidades
        function formatDate(dateString) {
            return new Date(dateString).toLocaleDateString('es-CO');
        }

        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.textContent = message;
            document.body.appendChild(toast);
            
            setTimeout(() => toast.classList.add('show'), 100);
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => document.body.removeChild(toast), 300);
            }, 3000);
        }

        function logout() {
            if (confirm('¿Está seguro de que desea cerrar sesión?')) {
                sessionStorage.removeItem('userSession');
                window.location.href = 'login.html';
            }
        }

        function closeModal() {
            document.getElementById('modal').style.display = 'none';
        }

        // Función de debug para verificar localStorage
        function debugLocalStorage() {
            console.log('=== DEBUG LOCALSTORAGE ===');
            console.log('Vehicles en localStorage:', localStorage.getItem('vehicles'));
            console.log('Drivers en localStorage:', localStorage.getItem('drivers'));
            console.log('Expenses en localStorage:', localStorage.getItem('expenses'));
            console.log('Users en localStorage:', localStorage.getItem('systemUsers'));
            console.log('Variables globales:');
            console.log('- vehicles array:', vehicles);
            console.log('- drivers array:', drivers);
            console.log('- expenses array:', expenses);
            console.log('- users object:', users);
            console.log('========================');
        }

        function testVehicleLoad() {
            console.log('🧪 [testVehicleLoad] Iniciando test manual de carga de vehículos...');
            
            // Verificar estado actual
            const container = document.getElementById('vehiclesList');
            console.log('🧪 [testVehicleLoad] Container antes del reload:', container?.innerHTML?.substring(0, 100));
            
            // Forzar recarga
            console.log('🧪 [testVehicleLoad] Ejecutando loadVehicles()...');
            loadVehicles();
            
            // Verificar estado después
            setTimeout(() => {
                const containerAfter = document.getElementById('vehiclesList');
                console.log('🧪 [testVehicleLoad] Container después del reload:', containerAfter?.innerHTML?.substring(0, 100));
            }, 100);
        }

        // Función para limpiar todo (debug)
        function clearAllData() {
            if (confirm('¿Eliminar TODOS los datos? Esta acción no se puede deshacer.')) {
                localStorage.removeItem('vehicles');
                localStorage.removeItem('drivers');
                localStorage.removeItem('expenses');
                localStorage.removeItem('systemUsers');
                vehicles = [];
                drivers = [];
                expenses = [];
                users = getDefaultUsers();
                loadVehicles();
                loadDrivers();
                loadExpenses();
                loadDashboardData();
                updateSelects();
                showToast('Todos los datos eliminados', 'warning');
            }
        }

        // Cargar datos iniciales cuando se carga la página
        window.addEventListener('load', function() {
            updateSelects();
            
            // Agregar botón de debug en el dashboard (solo para desarrollo)
            const dashboard = document.getElementById('dashboard');
            if (dashboard && window.location.hostname === 'localhost') {
                const debugSection = document.createElement('div');
                debugSection.innerHTML = `
                    <div class="card" style="margin-top: 20px; border: 2px solid #f39c12;">
                        <h3>🔧 Debug Tools (Solo desarrollo)</h3>
                        <button class="btn btn-warning" onclick="debugLocalStorage()">📊 Ver LocalStorage</button>
                        <button class="btn btn-danger" onclick="clearAllData()">🗑️ Limpiar Todo</button>
                        <button class="btn btn-info" onclick="loadVehicles(); loadDrivers(); loadExpenses();">🔄 Recargar Datos</button>
                        <button class="btn" onclick="testVehicleLoad()">🚚 Test Carga Vehículos</button>
                    </div>
                `;
                dashboard.appendChild(debugSection);
            }
        });
    </script>
</body>
</html>